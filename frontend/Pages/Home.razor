@page "/"
@inject ApiService Api
@inject NavigationManager _nav
@using System.Globalization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.RegularExpressions

<div style="margin-bottom: 2rem;">
    <div>
        <input type="text" @bind="ip" placeholder="IP Address" />
        <input type="text" style="width: 5rem;" @bind="port" placeholder="Port" />
        <button @onclick="Connect">Connect</button>
    </div>

    @if (!String.IsNullOrEmpty(connectionErrorStr))
    {
        <p style="color: red;">@connectionErrorStr</p>
    }
</div>

@if (hasConnection)
{
    <div style="height: 20rem; overflow-y: scroll;">
        <button @onclick="FetchNodes">Update node data</button>

        @if (!String.IsNullOrEmpty(nodesErrorStr))
        {
            <p style="color: red;">@nodesErrorStr</p>
        }

        <QuickGrid Items="@nodes" Pagination=@pagination>
            <TemplateColumn Title="Node">
                <p style="margin: 0;">@context.Address?.Ip:@context.Address?.Port</p>
            </TemplateColumn>
            <PropertyColumn Property="@(x => x.Cluster)" />
            <TemplateColumn>
                <button @onclick='@(() => _nav.NavigateTo("/node/" + context.Address?.Ip + ":" + context.Address?.Port))'>-></button>
            </TemplateColumn>
        </QuickGrid>
    </div>
    
    <h2>Create new container</h2>
    <div style="margin-bottom: 75px;">
        <div>
            <input type="text" @bind="image" placeholder="Image" />
            <input type="text" @bind="containerName" placeholder="Name" />
            @* <input type="text" @bind="ports" placeholder="e:i, e:i..." /> *@
            <input type="text" @bind="envs" placeholder="k=v, k=v..." />
            <button @onclick="CreateContainer" disabled="@(String.IsNullOrEmpty(image) || String.IsNullOrEmpty(containerName))">Create</button>
        </div>
    </div>

	<h2>Cluster overview</h2>
	<div style="height: 20rem; overflow-y: scroll; margin-bottom: 75px;">
        <QuickGrid Items="@containers">
            <PropertyColumn Property="@(x => x.Name)" Sortable="true"/>
            <PropertyColumn Property="@(x => x.Image)" Sortable="true" />
            <PropertyColumn Property="@(x => x.State)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" />
            <TemplateColumn>
                <button @onclick='@(() => _nav.NavigateTo("/container/" + context.Name))'>-></button>
            </TemplateColumn>
        </QuickGrid>
	</div>

}


@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Node>? nodes;

	private IQueryable<PicoContainer>? containers;

    private string? ip = "http://localhost";
    private string? port = "8080";
    private string? connectionErrorStr = null;
    private string? nodesErrorStr = null;
    private bool hasConnection = false;

    private string? image = null;
    private string? containerName = null;
    private string? ports = null;
    private string? envs = null;

    protected override async Task OnInitializedAsync() {
        await FetchNodes();
    }

    private async Task FetchNodes() {
        try {
            nodes = null;
            nodesErrorStr = null;
            StateHasChanged();

            if (hasConnection) {
                nodes = (await Api.Get<List<Node>>("nodes")).AsQueryable();
            }

            StateHasChanged();
        } catch (HttpRequestException e) {
            nodes = null;
            nodesErrorStr = "Unable to fetch nodes information";
            Console.WriteLine(e);
            StateHasChanged();
        }
    }

	private async Task FetchContainers() {
		try {
			containers = null;
			if (hasConnection) {
				containers = (await Api.Get<List<PicoContainer>>("containers")).AsQueryable();
			}
			StateHasChanged();
		} catch (HttpRequestException e) {
			containers = null;
			Console.WriteLine("Could not fetch nodes: " + e.Message);
		}
	}

    private async Task Connect() {
        try {
            CultureInfo ci = new CultureInfo("en-US");

            if (String.IsNullOrEmpty(ip) || String.IsNullOrEmpty(port)) {
                connectionErrorStr = "Given ip/port was null or empty.";
            } else if (!ip.StartsWith("http://", false, ci)) {
				ip = "http://" + ip;
            } else {
                connectionErrorStr = null;
                Api.initialize(ip + ":" + port);
                hasConnection = true;

                await FetchNodes();
				await FetchContainers();
            }
        } catch (UriFormatException e) {
            connectionErrorStr = "The hostname could not be parsed.";
            hasConnection = false;
            Console.WriteLine(e);
            StateHasChanged();
        }
    }

    private async void CreateContainer() {
        try {
            PicoContainer container = new PicoContainer();
            container.Name = containerName != null ? containerName : "";
            container.Image = image != null ? image : "";

            List<String> ports = this.ports != null ? Regex.Replace(this.ports, @"\s+", "").Split(',').ToList() : new List<String>();
            container.Ports = ports;

            List<String> env = this.envs != null ? Regex.Replace(this.envs, @"\s+", "").Split(',').ToList() : new List<String>();
            container.Env = env;

            container = await Api.Post<PicoContainer>("containers", container);

            Console.WriteLine("Created new container. Result: " + container.Name + " " + container.Image);
        } catch (Exception e) {
            nodesErrorStr = "Unable to send POST request to service.";
            Console.WriteLine(e);
            StateHasChanged();
        }
    }
}
