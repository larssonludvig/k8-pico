@page "/"
@inject ApiService Api
@inject NavigationManager _nav
@using System.Globalization
@using Microsoft.AspNetCore.Components.QuickGrid

<div style="margin-bottom: 2rem;">
    <div>
        <input type="text" @bind="ip" placeholder="IP Address" />
        <input type="text" style="width: 5rem;" @bind="port" placeholder="Port" />
        <button @onclick="Connect">Connect</button>
    </div>

    @if (!String.IsNullOrEmpty(connectionErrorStr))
    {
        <p style="color: red;">@connectionErrorStr</p>
    }
</div>

@if (hasConnection)
{
    <div style="height: 20rem; overflow-y: scroll;">
        <button @onclick="FetchNodes">Update node data</button>
		<button @onclick="FetchContainers">List all containers</button>

        <div>
            <div>
                <input type="text" @bind="image" placeholder="Image" />
                <input type="text" @bind="containerName" placeholder="Name" />
                <button @onclick="CreateContainer" disabled="@(String.IsNullOrEmpty(image) || String.IsNullOrEmpty(containerName))">Create</button>
            </div>
        </div>

        @if (!String.IsNullOrEmpty(nodesErrorStr))
        {
            <p style="color: red;">@nodesErrorStr</p>
        }

        <QuickGrid Items="@nodes" Pagination=@pagination>
            <PropertyColumn Property="@(x => x.Name)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" />
            <PropertyColumn Property="@(x => x.Address)" />
            <PropertyColumn Property="@(x => x.Port)" />
            <PropertyColumn Property="@(x => x.Cluster)" />
            <TemplateColumn>
                <button @onclick='@(() => _nav.NavigateTo("/node/" + context.Name))'>-></button>
            </TemplateColumn>
        </QuickGrid>
    </div>

	<div style="height: 20rem; overflow-y: scroll;">
        <QuickGrid Items="@containers">
            <PropertyColumn Property="@(x => x.Name)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" />
            <PropertyColumn Property="@(x => x.Image)" Sortable="true" />
            <PropertyColumn Property="@(x => x.Status)" Sortable="true" />
            <TemplateColumn>
                <button @onclick='@(() => _nav.NavigateTo("/container/" + context.Name))'>-></button>
            </TemplateColumn>
        </QuickGrid>
	</div>
}


@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Node>? nodes;
	private IQueryable<Pod>? containers;

    private string? ip = "http://10.0.0.15";
    private string? port = "8080";
    private string? connectionErrorStr = null;
    private string? nodesErrorStr = null;
    private bool hasConnection = false;

    private string? image = null;
    private string? containerName = null;

    protected override async Task OnInitializedAsync() {
        await FetchNodes();
    }

    private async Task FetchNodes() {
        try {
            nodes = null;
            nodesErrorStr = null;
            StateHasChanged();

            if (hasConnection) {
                nodes = (await Api.Get<List<Node>>("nodes")).AsQueryable();
            }

            StateHasChanged();
        } catch (HttpRequestException e) {
            nodes = null;
            nodesErrorStr = "Unable to fetch nodes information";
            Console.WriteLine(e);
            StateHasChanged();
        }
    }

	private async Task FetchContainers() {
		try {
			containers = null;
			if (hasConnection) {
				containers = (await Api.Get<List<Pod>>("containers")).AsQueryable();
			}
			StateHasChanged();
		} catch (HttpRequestException e) {
			containers = null;
			Console.WriteLine("Could not fetch nodes: " + e.Message);
		}
	}

    private async Task Connect() {
        try {
            CultureInfo ci = new CultureInfo("en-US");

            if (String.IsNullOrEmpty(ip) || String.IsNullOrEmpty(port)) {
                connectionErrorStr = "Given ip/port was null or empty.";
            } else if (!ip.StartsWith("http://", false, ci)) {
				ip = "http://" + ip;
            } else {
                connectionErrorStr = null;
                Api.initialize(ip + ":" + port);
                hasConnection = true;

                await FetchNodes();
                await FetchContainers();
            }
        } catch (UriFormatException e) {
            connectionErrorStr = "The hostname could not be parsed.";
            hasConnection = false;
            Console.WriteLine(e);
            StateHasChanged();
        }
    }

    private async void CreateContainer() {
        try {
            Pod pod = new Pod();
            pod.Name = containerName != null ? containerName : "";
            pod.Image = image != null ? image : "";

            pod = await Api.Post<Pod>("containers", pod);

            Console.WriteLine("Created new pod. Result: " + pod.Name + " " + pod.Image);
        } catch (Exception e) {
            nodesErrorStr = "Unable to send POST request to service.";
            Console.WriteLine(e);
            StateHasChanged();
        }
    }
}
