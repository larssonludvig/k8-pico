@page "/node/{name}"
@implements IDisposable
@inject ApiService Api
@inject NavigationManager _nav
@using Microsoft.AspNetCore.Components.QuickGrid

<h1>@name</h1>
<div style="display: flex;">
    @* General info *@
    <div style="flex: 1; display: flex;">
        <div style="margin-right: 2rem;">
            <p style="font-weight: bold;">Address: </p>
            <p style="font-weight: bold;">Port: </p>
            <p style="font-weight: bold;">Cluster: </p>
            <p style="font-weight: bold;">Number of containers: </p>
        </div>
        <div>
            <p>@node?.Address?.Ip</p>
            <p>@node?.Address?.Port</p>
            <p>@node?.Cluster</p>
			<p>@node?.Containers.Count()</p>
        </div>
    </div>
    <div style="flex: 1; display: flex;">
        <div style="margin-right: 2rem;">
            <p style="font-weight: bold;">CPU usage: </p>
            <p style="font-weight: bold;">RAM usage: </p>
        </div>
        @if (perf != null)
        {
            <div>
                <p>@perf.CPULoad.ToString("0.00")</p>
                <p>@perf.MemLoad.ToString("0.00")</p>
            </div>
        }
    </div>
</div>

<div style="max-height: 25rem; overflow-y: scroll;">
    @* Containers grid *@
    <QuickGrid Items="containers">
        <PropertyColumn Property="@(x => x.Name)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" />
        <PropertyColumn Property="@(x => x.Image)" Sortable="true" />
        <PropertyColumn Property="@(x => x.State)" Sortable="true" />
            <TemplateColumn>
                <button @onclick='@(() => _nav.NavigateTo("/container/" + context.Name))'>-></button>
            </TemplateColumn>
    </QuickGrid>
</div>

@code {
    [Parameter] public string name { get; set; } = "";
    private Node? node = null;
    private Performance? perf = null;
    private IQueryable<PicoContainer>? containers = null; 

    private Timer? timer;
    
    protected override async Task OnInitializedAsync() {
        await FetchNode();
        await FetchPerformance();

        timer = new Timer(UpdateData, null, 0, 2000);
    }

    private void UpdateData(object? state) {
        InvokeAsync(FetchPerformance);
    }

    private async Task FetchNode() {
        try {
            node = await Api.Get<Node>("nodes/" + name);
            containers = node.Containers.AsQueryable();
        } catch (Exception e) {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    private async Task FetchPerformance() {
        try {
            perf = await Api.Get<Performance>("nodes/" + name + "/performance");
        } catch (Exception e) {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}