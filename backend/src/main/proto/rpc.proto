syntax = "proto3";

option java_multiple_files = true;
option java_package = "se.umu.cs.ads.communication";
option java_outer_classname = "RPCProto";

package communication;

message RpcMessage {
    string payload = 1;
}

message RpcMetadata {
    string ip = 1;
    int32 port = 2;
}

message RpcNode {
    string clusterName = 1;
    string ip = 2;
    int32 port = 3;
    RpcContainers containers = 4;
}

message RpcNodes {
    repeated RpcNode nodes = 1;
}

enum RpcContainerState {
    RUNNING = 0;
    STOPPED = 1;
    RESTARTING = 2;
    NAME_CONFLICT = 3;
    PORT_CONFLICT = 4;
    UNKNOWN = 5;
}

message RpcStrings {
    repeated string strings = 1;
}

message RpcMap {
    map<int32, int32> map = 1;
}

message RpcContainer {
    string name = 1;
    string image = 2;
    RpcMap ports = 3;
    RpcStrings envs = 4;
    RpcContainerState state = 5;
}

message RpcContainers {
    repeated RpcContainer containers = 1;
}

message RpcJoinRequest {
	RpcMetadata sender = 1;
	RpcNode aspirant = 2;
}

message RpcPerformance {
    double cpuLoad = 1;
    double memLoad = 2;
	double freeRam = 3;
}

message RpcEmpty {}

service RpcService {
    rpc fetchNode               (RpcMetadata) returns (RpcNode);
    // rpc fetchNodes              (RpcEmpty) returns (RpcNodes);
    rpc fetchNodePerformance    (RpcEmpty) returns (RpcPerformance);
    rpc createContainer         (RpcContainer) returns (RpcEmpty);
    // rpc containerList           () returns ();
    // rpc containerElectionStart  () returns ();
    // rpc containerElectionEnd    () returns ();
    rpc join                        (RpcJoinRequest) returns (RpcNodes);
    rpc leave                   (RpcMetadata) returns (RpcEmpty);
    rpc removeNode              (RpcMetadata) returns (RpcEmpty);
}